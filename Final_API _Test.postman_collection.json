{
	"info": {
		"_postman_id": "9f1cdab3-5263-47bc-bd2e-c85615b298fd",
		"name": "Final API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Delete DB Data",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{ip}}:4567/delete/dbdata",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"delete",
						"dbdata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User With Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"user_id\", jsonData.user_id);\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('successfully added user');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "raven",
							"type": "text"
						},
						{
							"key": "email",
							"value": "raven@gmail.com",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "bio ku",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/user/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User Without Bio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"user_id2\", jsonData.user_id);\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('successfully added user');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "jack",
							"type": "text"
						},
						{
							"key": "email",
							"value": "jack@gmail.com",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/user/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User Without Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add user, please enter email');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "Ruby",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "ruby bio",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/user/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User Without Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add user, please enter username');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "email@gmail.com",
							"type": "text"
						},
						{
							"key": "bio",
							"value": "bio ku",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/user/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Post With Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"post_id\", jsonData.post_id);\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('successfully added post');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "Why programmers prefer dark mode?#Programmer",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/wijay/OneDrive/Desktop/download.jpg"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/post/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Post Without Attachment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"post_id2\", jsonData.post_id);\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('successfully added post');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "The only programming joke i know... is my code\n#sad#Programmer",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/post/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Post Without user_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add post, please enter user_id');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "content",
							"value": "Why programmers prefer dark mode?#Programmer",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/post/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Post Without Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add post, please enter content');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/post/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Post With Text More Than 1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Maximum limit of a text is 1000 characters');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Na",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/post/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Posts by Tag Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('the post should have contains only id, content, user_id, file_path and tags', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    responseJson.forEach((post) => {\r",
							"        pm.expect(post).to.haveOwnProperty('id');\r",
							"        pm.expect(post).to.haveOwnProperty('content');\r",
							"        pm.expect(post).to.haveOwnProperty('user_id');\r",
							"        pm.expect(post).to.haveOwnProperty('file_path');\r",
							"        pm.expect(post).to.haveOwnProperty('tags');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{ip}}:4567/post/%23sad",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"post",
						"%23sad"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Top 5 HashTags",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('the tag should have contains only id and name', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    responseJson.forEach((post) => {\r",
							"        pm.expect(post).to.haveOwnProperty('id');\r",
							"        pm.expect(post).to.haveOwnProperty('name');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ip}}:4567/tag/trend",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"tag",
						"trend"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment With Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('successfully added comment');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id2}}",
							"type": "text"
						},
						{
							"key": "post_id",
							"value": "{{post_id2}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "i feel u bro #sad #Programmer #comment",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/wijay/OneDrive/Desktop/37f.jpg"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/comment/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"comment",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment With Text More Than 1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add comment, Maximum limit of a text is 1000 characters');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id2}}",
							"type": "text"
						},
						{
							"key": "post_id",
							"value": "{{post_id}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Na",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/comment/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"comment",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment Without Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('successfully added comment');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id2}}",
							"type": "text"
						},
						{
							"key": "post_id",
							"value": "{{post_id}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "cause lights attract bugs\n#programmer #comment",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": [],
							"disabled": true
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/comment/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"comment",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment Without post_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add comment, please enter post_id');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id2}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "i feel u bro #sad #Programmer #comment",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/comment/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"comment",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment Without user_id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add comment, please enter user_id');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "post_id",
							"value": "{{post_id}}",
							"type": "text"
						},
						{
							"key": "content",
							"value": "i feel u bro #sad #Programmer #comment",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/comment/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"comment",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Comment Without content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(400);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('failed to add comment, please enter content');\r",
							"  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "{{user_id}}",
							"type": "text"
						},
						{
							"key": "post_id",
							"value": "{{post_id}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:4567/comment/create",
					"host": [
						"{{ip}}"
					],
					"port": "4567",
					"path": [
						"comment",
						"create"
					]
				}
			},
			"response": []
		}
	]
}